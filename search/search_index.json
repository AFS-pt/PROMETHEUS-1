{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the PROMETHEUS-1 project wiki! This website is composed of indexed pages which describe some important documentation about the satellite, such as its assembly. Index Satellite Guide description Engineering unit Hardware Printed circuit boards Antenna Rails Standoffs, inserts and screws Mounting base Firmware Flash SAMD UF2 bootloader on main board Flash CircuitPython on main board Flash firmware on camera board Software Build an application Flash an application Unitary testing Main board payload LoRa communication Camera detection Assembly Creating an antenna Placing inserts on rails Assemblying the satellite Charging the batteries System check Flight unit Vibration testing and bake-out process Day in the life testing Assembly precautions Loctite usage Windform rails Credits","title":"Welcome to the PROMETHEUS-1 project wiki!"},{"location":"#welcome-to-the-prometheus-1-project-wiki","text":"This website is composed of indexed pages which describe some important documentation about the satellite, such as its assembly.","title":"Welcome to the PROMETHEUS-1 project wiki!"},{"location":"#index","text":"Satellite Guide description Engineering unit Hardware Printed circuit boards Antenna Rails Standoffs, inserts and screws Mounting base Firmware Flash SAMD UF2 bootloader on main board Flash CircuitPython on main board Flash firmware on camera board Software Build an application Flash an application Unitary testing Main board payload LoRa communication Camera detection Assembly Creating an antenna Placing inserts on rails Assemblying the satellite Charging the batteries System check Flight unit Vibration testing and bake-out process Day in the life testing Assembly precautions Loctite usage Windform rails Credits","title":"Index"},{"location":"2.%20Satellite/2.1.%20Guide%20description/","text":"2.1. Guide description During two weeks on June 2023, a couple of stacks were successfully build at University of Minho, in which this guide is based. It provides a detailed step-by-step guide to correctly assemble and system check a PyCubed-Mini framework satellite of a PocketQube size. We also give some tips and useful notes for the process, learnt from this and previous builds at Carnergie Mellon University, where it was originally created and developed through multiple revisions. During the development of a space mission, there are usually two separate units to build: an Engineering Unit and a Flight Unit. As the names sound, one is meant to validade all the hardware, firmware and software needed, while the other replicates it for a launch, ensuring extra safe and clean procedures, as required by launch companies. This guide will be initially divided by each unit type, then mentioning the required parts to assemble each stack, describing the purpose and available options for fullfilling each one of the elements required. After, there will be some single testing of that parts, followed by the final assembly steps, for completing the stack, and final checking procedures. This guide follows a sort of chronological order to facilitate its following, yet advised to fully read it first to avoid mistakes during the procedure.","title":"2.1. Guide description"},{"location":"2.%20Satellite/2.1.%20Guide%20description/#21-guide-description","text":"During two weeks on June 2023, a couple of stacks were successfully build at University of Minho, in which this guide is based. It provides a detailed step-by-step guide to correctly assemble and system check a PyCubed-Mini framework satellite of a PocketQube size. We also give some tips and useful notes for the process, learnt from this and previous builds at Carnergie Mellon University, where it was originally created and developed through multiple revisions. During the development of a space mission, there are usually two separate units to build: an Engineering Unit and a Flight Unit. As the names sound, one is meant to validade all the hardware, firmware and software needed, while the other replicates it for a launch, ensuring extra safe and clean procedures, as required by launch companies. This guide will be initially divided by each unit type, then mentioning the required parts to assemble each stack, describing the purpose and available options for fullfilling each one of the elements required. After, there will be some single testing of that parts, followed by the final assembly steps, for completing the stack, and final checking procedures. This guide follows a sort of chronological order to facilitate its following, yet advised to fully read it first to avoid mistakes during the procedure.","title":"2.1. Guide description"},{"location":"2.%20Satellite/2.2.%20Engineering%20unit/2.2.2.%20Firmware/","text":"Firmware Preferably, you should skip building both the SAMD UF2 bootloader and CircuitPython files, as they are already released on Firmware , and skip to Flashing SAMD UF2 bootloader . However, some important references are given if you want to learn the required steps to build the SAMD UF2 bootloader or CircuitPython yourself. Flash SAMD UF2 bootloader on mainboard Based on RExLab tutorial : The following procedure needs to be performed only once (barring any bricking / updating the bootloader) on a newly assembled mainboard with an unprogrammed MCU - in our case, the ATSAMD51J19A. What you need ATSAMD51 board (such as the PyCubed-Mini mainboard); Windows PC with atleast 2 free USB ports; SEGGER J-Link (we use the EDU Mini model); 2x5 pin 1.27mm pitch ribbon cable; USB-C and micro-USB cables, both with power and data lines; SAMD bootloader binary file. Step 1: Set up your PC Visit Microchip Studio download page , scroll down, and download the Web installer version of Microchip Studio. (The offline installer should also work, however I have had issues with antivirus software blocking it); Accept the Terms and Conditions, and deselect the \"Send anonymous data\" box. On the next page, select the architectures you'd like to install - we will only be using SAM boards. Finally, deselect \"Advanced Software Framework and Example Projects\" as these are not necessary. The rest of the installation should be fairly straightforward; If asked to install the XC8 compiler, simply hit \"OK\" without installing - it is not necessary for this guide; Microchip Studio should now be set up and open; Next, visit SEGGER J-Link download page , and download the latest Windows version of the J-Link software. The install process for this is fairly straightforward. The default settings should work fine; A new SEGGER J-Link DLL Updater window will open asking to update Atmel Studio to the latest SEGGER software version. Make sure the check mark is selected and click \"OK\"; Your computer is now ready for flashing the bootloader. Step 2: Flash the bootloader Plug one end of the ribbon cable on 2x5 connector of the main board. Make sure pin 1 of the ribbon cable (red wire) is matching pin 1 of the board connector (longer silkscreen mark); Plug the other end on the J-Link. Make sure pin 1 of the ribbon cable is matching pin 1 of the connector (white dot); Plug the J-Link on your PC with the micro-USB cable; Plug the the main board on your PC with the USB-C cable; Based on AdaFruit tutorial : Next, open Atmel Studio. From the toolbar, select \"Tools\" -> \"Device Programming\"; The device programming window will open. Then, select \"Tool\" -> \"J-Link\"; If you're using a J-Link EDU, accept the terms of use that will pop up after selecting the J-Link interface; After that, select the Device (the type of chip you're programming): ATSAMD51J19A and click \"Read\" in the top navigation bar. The empty fields for Device Signature and Target Voltage should populate; NOTE: Make sure these values appear before proceeding! If the board or your wiring is not detected, Atmel Studio will throw an error that it could not connect to the board. Check your wiring and try to connect again. On the sidebar, click Memories. On Flash, select the bootloader binary file that you either built or downloaded, and mark \"Erase Flash before programming\"; Click \"Program\", then \"Verify\"; NOTE: After clicking, the serial should output \"OK\" for each action, and there should be a new USB volume mounted on your machine. Flash CircuitPython on mainboard What you need PyCubed-Mini mainboard; PC with 1 free USB port; USB-C cable with power and data lines; CircuitPython UF2 file. Step 1: Connect the board If you installed the bootloader right before, nothing should be made in this step; Otherwise, you should plug the board with the USB-C cable and the device should appear on your machine. Step 2: Flash CircuitPython Based on AdaFruit tutorial : Drag and drop the CircuitPython UF2 file that you either built or downloaded to the pycubedminiBOOT volume; The volume should briefly disappear, and reappear as CIRCUITPY; Your board is now running CircuitPython!","title":"2.2.2. Firmware"},{"location":"2.%20Satellite/2.2.%20Engineering%20unit/2.2.2.%20Firmware/#firmware","text":"Preferably, you should skip building both the SAMD UF2 bootloader and CircuitPython files, as they are already released on Firmware , and skip to Flashing SAMD UF2 bootloader . However, some important references are given if you want to learn the required steps to build the SAMD UF2 bootloader or CircuitPython yourself.","title":"Firmware"},{"location":"2.%20Satellite/2.2.%20Engineering%20unit/2.2.2.%20Firmware/#flash-samd-uf2-bootloader-on-mainboard","text":"Based on RExLab tutorial : The following procedure needs to be performed only once (barring any bricking / updating the bootloader) on a newly assembled mainboard with an unprogrammed MCU - in our case, the ATSAMD51J19A.","title":"Flash SAMD UF2 bootloader on mainboard"},{"location":"2.%20Satellite/2.2.%20Engineering%20unit/2.2.2.%20Firmware/#what-you-need","text":"ATSAMD51 board (such as the PyCubed-Mini mainboard); Windows PC with atleast 2 free USB ports; SEGGER J-Link (we use the EDU Mini model); 2x5 pin 1.27mm pitch ribbon cable; USB-C and micro-USB cables, both with power and data lines; SAMD bootloader binary file.","title":"What you need"},{"location":"2.%20Satellite/2.2.%20Engineering%20unit/2.2.2.%20Firmware/#step-1-set-up-your-pc","text":"Visit Microchip Studio download page , scroll down, and download the Web installer version of Microchip Studio. (The offline installer should also work, however I have had issues with antivirus software blocking it); Accept the Terms and Conditions, and deselect the \"Send anonymous data\" box. On the next page, select the architectures you'd like to install - we will only be using SAM boards. Finally, deselect \"Advanced Software Framework and Example Projects\" as these are not necessary. The rest of the installation should be fairly straightforward; If asked to install the XC8 compiler, simply hit \"OK\" without installing - it is not necessary for this guide; Microchip Studio should now be set up and open; Next, visit SEGGER J-Link download page , and download the latest Windows version of the J-Link software. The install process for this is fairly straightforward. The default settings should work fine; A new SEGGER J-Link DLL Updater window will open asking to update Atmel Studio to the latest SEGGER software version. Make sure the check mark is selected and click \"OK\"; Your computer is now ready for flashing the bootloader.","title":"Step 1: Set up your PC"},{"location":"2.%20Satellite/2.2.%20Engineering%20unit/2.2.2.%20Firmware/#step-2-flash-the-bootloader","text":"Plug one end of the ribbon cable on 2x5 connector of the main board. Make sure pin 1 of the ribbon cable (red wire) is matching pin 1 of the board connector (longer silkscreen mark); Plug the other end on the J-Link. Make sure pin 1 of the ribbon cable is matching pin 1 of the connector (white dot); Plug the J-Link on your PC with the micro-USB cable; Plug the the main board on your PC with the USB-C cable; Based on AdaFruit tutorial : Next, open Atmel Studio. From the toolbar, select \"Tools\" -> \"Device Programming\"; The device programming window will open. Then, select \"Tool\" -> \"J-Link\"; If you're using a J-Link EDU, accept the terms of use that will pop up after selecting the J-Link interface; After that, select the Device (the type of chip you're programming): ATSAMD51J19A and click \"Read\" in the top navigation bar. The empty fields for Device Signature and Target Voltage should populate; NOTE: Make sure these values appear before proceeding! If the board or your wiring is not detected, Atmel Studio will throw an error that it could not connect to the board. Check your wiring and try to connect again. On the sidebar, click Memories. On Flash, select the bootloader binary file that you either built or downloaded, and mark \"Erase Flash before programming\"; Click \"Program\", then \"Verify\"; NOTE: After clicking, the serial should output \"OK\" for each action, and there should be a new USB volume mounted on your machine.","title":"Step 2: Flash the bootloader"},{"location":"2.%20Satellite/2.2.%20Engineering%20unit/2.2.2.%20Firmware/#flash-circuitpython-on-mainboard","text":"","title":"Flash CircuitPython on mainboard"},{"location":"2.%20Satellite/2.2.%20Engineering%20unit/2.2.2.%20Firmware/#what-you-need_1","text":"PyCubed-Mini mainboard; PC with 1 free USB port; USB-C cable with power and data lines; CircuitPython UF2 file.","title":"What you need"},{"location":"2.%20Satellite/2.2.%20Engineering%20unit/2.2.2.%20Firmware/#step-1-connect-the-board","text":"If you installed the bootloader right before, nothing should be made in this step; Otherwise, you should plug the board with the USB-C cable and the device should appear on your machine.","title":"Step 1: Connect the board"},{"location":"2.%20Satellite/2.2.%20Engineering%20unit/2.2.2.%20Firmware/#step-2-flash-circuitpython","text":"Based on AdaFruit tutorial : Drag and drop the CircuitPython UF2 file that you either built or downloaded to the pycubedminiBOOT volume; The volume should briefly disappear, and reappear as CIRCUITPY; Your board is now running CircuitPython!","title":"Step 2: Flash CircuitPython"},{"location":"2.%20Satellite/2.2.%20Engineering%20unit/2.2.1.%20Hardware/2.2.2.1.%20Printed%20circuit%20boards/","text":"Printed Circuit Boards (PCBs) The PCBs are the fundamental hardware of the PyCubed-Mini, as they are precisely designed to hold its required components, as well as their connections, being that external, with USB-C connectors to easily interface with a computer or internal ones: between components in the same board, through the middle of it; or between board with stack connectors, with data and power lines. The satellite is composed of eleven PCBs in total: five horizontally stacked inside, one on top of the other; and six covering each outside face of the cube. The KiCad schematics and board designs, as well as the gerber files for each are released in Boards . The recommended manufacturing option is to print the boards and solder the components at specialized companies, since there are multiple components in each board, some of them with different maximum temperature, in very reduced size or in need of a reflow oven. This section will only mention the primary components and their references, discarding stack connectors and power regulation (present in all), reset and boot switches and status LEDs (present in some). Inside boards The first group is divided in main board, camera board and battery boards. Main board The main board contains the ATSAMD51J19A main microcontroller and MAX706 external watchdog timer, BNO085 IMU sensor and magnetorquer drivers, PCF8523 Real Time Clock, RFM98 radio module for 433 MHz LoRa communication, a USB-C connector for side power, flashing and communicating and SD Card connector for data logging. Camera board The camera board, as the name tells, holds the OV5640 camera, the STM32H743VI camera microcontroller, an SD Card connector for image savings, and a USB-C connector, for the same reasons as the main board. The camera ribbon cable is placed on the desired connector and should be fixed in the center square with tiny quantities of epoxy. Battery boards Two LP603443 batteries present in the satellite are placed between the three battery boards, wired in parallel for improved capacity, each with 3.7 V and 3.15 Wh. The circuitry is capable of sensing the current drawn and measuring its voltage. Outside boards In all six solar boards (Figure 7), there are 14-turn coils serving as magnetorquers, 42 solar cells (KXOB25-05X3F) spread by the available space, energy harvesting systems, as well as OPT3001 sunlight sensors. There is also the antenna and burn wires, for its deployment, in one of the faces. Also, at the bottom one, there are two position switches that cut the battery power when pressed, preventing power draining during testing and storing. It has also a hole in the center, enabling the camera to take visible pictures. In all solar boards, there is a 0 \u03a9 resistor that is responsible for defining the correct I2C bus assignment. For negative axis boards, this SMD type wire pulls the I2C line to ground, while in positive boards, it should pull to power. You can also check some important voltage potential values, such as (B)attery, (G)roud, (S)olar panels and (3).3 V, in the holes near the board edges. +X, -X, +Y boards These boards are equal, composed of eight solar cells each. -Y board This board, besides the eight solar cells, holds two position switches that cut the battery power when pressed, preventing power draining during testing and storing. It has also a hole in the center, enabling the camera to take pictures. +Z board This board holds the two holes needed for the USB-C connectors in main and camera boards, besides the six solar cells. -Z board This board, besides the four solar cells, holds the antenna, which is holded in place with fishing line tied to each burn wire.","title":"Printed Circuit Boards (PCBs)"},{"location":"2.%20Satellite/2.2.%20Engineering%20unit/2.2.1.%20Hardware/2.2.2.1.%20Printed%20circuit%20boards/#printed-circuit-boards-pcbs","text":"The PCBs are the fundamental hardware of the PyCubed-Mini, as they are precisely designed to hold its required components, as well as their connections, being that external, with USB-C connectors to easily interface with a computer or internal ones: between components in the same board, through the middle of it; or between board with stack connectors, with data and power lines. The satellite is composed of eleven PCBs in total: five horizontally stacked inside, one on top of the other; and six covering each outside face of the cube. The KiCad schematics and board designs, as well as the gerber files for each are released in Boards . The recommended manufacturing option is to print the boards and solder the components at specialized companies, since there are multiple components in each board, some of them with different maximum temperature, in very reduced size or in need of a reflow oven. This section will only mention the primary components and their references, discarding stack connectors and power regulation (present in all), reset and boot switches and status LEDs (present in some).","title":"Printed Circuit Boards (PCBs)"},{"location":"2.%20Satellite/2.2.%20Engineering%20unit/2.2.1.%20Hardware/2.2.2.1.%20Printed%20circuit%20boards/#inside-boards","text":"The first group is divided in main board, camera board and battery boards.","title":"Inside boards"},{"location":"2.%20Satellite/2.2.%20Engineering%20unit/2.2.1.%20Hardware/2.2.2.1.%20Printed%20circuit%20boards/#main-board","text":"The main board contains the ATSAMD51J19A main microcontroller and MAX706 external watchdog timer, BNO085 IMU sensor and magnetorquer drivers, PCF8523 Real Time Clock, RFM98 radio module for 433 MHz LoRa communication, a USB-C connector for side power, flashing and communicating and SD Card connector for data logging.","title":"Main board"},{"location":"2.%20Satellite/2.2.%20Engineering%20unit/2.2.1.%20Hardware/2.2.2.1.%20Printed%20circuit%20boards/#camera-board","text":"The camera board, as the name tells, holds the OV5640 camera, the STM32H743VI camera microcontroller, an SD Card connector for image savings, and a USB-C connector, for the same reasons as the main board. The camera ribbon cable is placed on the desired connector and should be fixed in the center square with tiny quantities of epoxy.","title":"Camera board"},{"location":"2.%20Satellite/2.2.%20Engineering%20unit/2.2.1.%20Hardware/2.2.2.1.%20Printed%20circuit%20boards/#battery-boards","text":"Two LP603443 batteries present in the satellite are placed between the three battery boards, wired in parallel for improved capacity, each with 3.7 V and 3.15 Wh. The circuitry is capable of sensing the current drawn and measuring its voltage.","title":"Battery boards"},{"location":"2.%20Satellite/2.2.%20Engineering%20unit/2.2.1.%20Hardware/2.2.2.1.%20Printed%20circuit%20boards/#outside-boards","text":"In all six solar boards (Figure 7), there are 14-turn coils serving as magnetorquers, 42 solar cells (KXOB25-05X3F) spread by the available space, energy harvesting systems, as well as OPT3001 sunlight sensors. There is also the antenna and burn wires, for its deployment, in one of the faces. Also, at the bottom one, there are two position switches that cut the battery power when pressed, preventing power draining during testing and storing. It has also a hole in the center, enabling the camera to take visible pictures. In all solar boards, there is a 0 \u03a9 resistor that is responsible for defining the correct I2C bus assignment. For negative axis boards, this SMD type wire pulls the I2C line to ground, while in positive boards, it should pull to power. You can also check some important voltage potential values, such as (B)attery, (G)roud, (S)olar panels and (3).3 V, in the holes near the board edges.","title":"Outside boards"},{"location":"2.%20Satellite/2.2.%20Engineering%20unit/2.2.1.%20Hardware/2.2.2.1.%20Printed%20circuit%20boards/#x-x-y-boards","text":"These boards are equal, composed of eight solar cells each.","title":"+X, -X, +Y boards"},{"location":"2.%20Satellite/2.2.%20Engineering%20unit/2.2.1.%20Hardware/2.2.2.1.%20Printed%20circuit%20boards/#-y-board","text":"This board, besides the eight solar cells, holds two position switches that cut the battery power when pressed, preventing power draining during testing and storing. It has also a hole in the center, enabling the camera to take pictures.","title":"-Y board"},{"location":"2.%20Satellite/2.2.%20Engineering%20unit/2.2.1.%20Hardware/2.2.2.1.%20Printed%20circuit%20boards/#z-board","text":"This board holds the two holes needed for the USB-C connectors in main and camera boards, besides the six solar cells.","title":"+Z board"},{"location":"2.%20Satellite/2.2.%20Engineering%20unit/2.2.1.%20Hardware/2.2.2.1.%20Printed%20circuit%20boards/#-z-board","text":"This board, besides the four solar cells, holds the antenna, which is holded in place with fishing line tied to each burn wire.","title":"-Z board"},{"location":"2.%20Satellite/2.2.%20Engineering%20unit/2.2.1.%20Hardware/2.2.2.2.%20Antenna/","text":"Antenna When simplicity and flexibility are two major parameters when designing an foldable antenna for this satellite, conductive tape measure comes in hand to develop a feasible solution. Antenna strips As mentioned before, the satellite antenna, composed of two tape measure strips, is soldered to the defined Z- board pads. The metallic tape measure required for the process must be of approximately 1 cm in width, be almost planar and if possible, made of a easy-soldable material. The tape reference used for the assembly was DEXTER 8MM. Fishing line The fishing line used for passing through the tape measure strip hole and the burn wire must be multithreaded, as each thread is smaller, they are melted easier when current passes through the burn wire. The line reference used for the assembly was CAPERLAM 4X 0.16 mm. Burn wire The burn wire is made of nickel and chrome alloy of size AWG30.","title":"Antenna"},{"location":"2.%20Satellite/2.2.%20Engineering%20unit/2.2.1.%20Hardware/2.2.2.2.%20Antenna/#antenna","text":"When simplicity and flexibility are two major parameters when designing an foldable antenna for this satellite, conductive tape measure comes in hand to develop a feasible solution.","title":"Antenna"},{"location":"2.%20Satellite/2.2.%20Engineering%20unit/2.2.1.%20Hardware/2.2.2.2.%20Antenna/#antenna-strips","text":"As mentioned before, the satellite antenna, composed of two tape measure strips, is soldered to the defined Z- board pads. The metallic tape measure required for the process must be of approximately 1 cm in width, be almost planar and if possible, made of a easy-soldable material. The tape reference used for the assembly was DEXTER 8MM.","title":"Antenna strips"},{"location":"2.%20Satellite/2.2.%20Engineering%20unit/2.2.1.%20Hardware/2.2.2.2.%20Antenna/#fishing-line","text":"The fishing line used for passing through the tape measure strip hole and the burn wire must be multithreaded, as each thread is smaller, they are melted easier when current passes through the burn wire. The line reference used for the assembly was CAPERLAM 4X 0.16 mm.","title":"Fishing line"},{"location":"2.%20Satellite/2.2.%20Engineering%20unit/2.2.1.%20Hardware/2.2.2.2.%20Antenna/#burn-wire","text":"The burn wire is made of nickel and chrome alloy of size AWG30.","title":"Burn wire"},{"location":"2.%20Satellite/2.2.%20Engineering%20unit/2.2.1.%20Hardware/2.2.2.3.%20Rails/","text":"Rails Rails are the structural supports of the stack. There are two pieces in each stack, on the top and on the bottom, in which they hold inserts, sorted by the 3 axis. They provide the screwthreads needed for securing each external panels, as well as the upper and lower internal ones. They are usually build from 3D-printed polylactic acid (PLA), since it is a cheap, simple and effective solution for granting the required rigidity for a testing unit. Also made from PLA, two small brackets are needed for adjusting the antenna strips angle, holded in place with two M2 screws and nuts of nylon. The 3D models of each rail and brackets are released in Mechanical Structure .","title":"Rails"},{"location":"2.%20Satellite/2.2.%20Engineering%20unit/2.2.1.%20Hardware/2.2.2.3.%20Rails/#rails","text":"Rails are the structural supports of the stack. There are two pieces in each stack, on the top and on the bottom, in which they hold inserts, sorted by the 3 axis. They provide the screwthreads needed for securing each external panels, as well as the upper and lower internal ones. They are usually build from 3D-printed polylactic acid (PLA), since it is a cheap, simple and effective solution for granting the required rigidity for a testing unit. Also made from PLA, two small brackets are needed for adjusting the antenna strips angle, holded in place with two M2 screws and nuts of nylon. The 3D models of each rail and brackets are released in Mechanical Structure .","title":"Rails"},{"location":"2.%20Satellite/2.2.%20Engineering%20unit/2.2.1.%20Hardware/2.2.2.4.%20Standoffs%2C%20inserts%20and%20screws/","text":"Standoffs, inserts and screws There are three major types of mechanical parts required for the satellite, mentioned in the subtitle. They are recommended to be made of brass, since it has low density, or alluminum alternatively for the same reason. Standoffs First, the standoffs separate each inside board with the adequate space between them. There were two sizes used: 6 mm and 4 mm in length, with eight M3 units needed for each size. Heat inserts Then, the heat inserts, as referred before, provide the screwthreads needed for securing the external boards to the internal stack. There are needed 24 units in total: 4 units of M3, for attaching the -Y board to the stack; and 20 units of M2, for attaching X, +Y and Z boards. Screws Finally, the screws fix the boards mentioned above, therefore, it is needed: 4 units of M3 (4 mm) for screwing -Y board to the -Y rail; 4 units of M3 (6 mm) screws for +Y rail to the stack; and 20 units of M2 (5 mm) screws for X, +Y and Z boards.","title":"Standoffs, inserts and screws"},{"location":"2.%20Satellite/2.2.%20Engineering%20unit/2.2.1.%20Hardware/2.2.2.4.%20Standoffs%2C%20inserts%20and%20screws/#standoffs-inserts-and-screws","text":"There are three major types of mechanical parts required for the satellite, mentioned in the subtitle. They are recommended to be made of brass, since it has low density, or alluminum alternatively for the same reason.","title":"Standoffs, inserts and screws"},{"location":"2.%20Satellite/2.2.%20Engineering%20unit/2.2.1.%20Hardware/2.2.2.4.%20Standoffs%2C%20inserts%20and%20screws/#standoffs","text":"First, the standoffs separate each inside board with the adequate space between them. There were two sizes used: 6 mm and 4 mm in length, with eight M3 units needed for each size.","title":"Standoffs"},{"location":"2.%20Satellite/2.2.%20Engineering%20unit/2.2.1.%20Hardware/2.2.2.4.%20Standoffs%2C%20inserts%20and%20screws/#heat-inserts","text":"Then, the heat inserts, as referred before, provide the screwthreads needed for securing the external boards to the internal stack. There are needed 24 units in total: 4 units of M3, for attaching the -Y board to the stack; and 20 units of M2, for attaching X, +Y and Z boards.","title":"Heat inserts"},{"location":"2.%20Satellite/2.2.%20Engineering%20unit/2.2.1.%20Hardware/2.2.2.4.%20Standoffs%2C%20inserts%20and%20screws/#screws","text":"Finally, the screws fix the boards mentioned above, therefore, it is needed: 4 units of M3 (4 mm) for screwing -Y board to the -Y rail; 4 units of M3 (6 mm) screws for +Y rail to the stack; and 20 units of M2 (5 mm) screws for X, +Y and Z boards.","title":"Screws"},{"location":"2.%20Satellite/2.2.%20Engineering%20unit/2.2.1.%20Hardware/2.2.2.5.%20Mounting%20base/","text":"Mounting base The mounting base is 3D-printed from PLA to provide a stable and safe piece to the satellite be placed on. Also it helps to place it on a flat surface and to hold it without pressing any components. The sliding required to insert the satellite facilitates the trigger of the switch mechanism stated previously. The 3D model is released in Fixtures .","title":"Mounting base"},{"location":"2.%20Satellite/2.2.%20Engineering%20unit/2.2.1.%20Hardware/2.2.2.5.%20Mounting%20base/#mounting-base","text":"The mounting base is 3D-printed from PLA to provide a stable and safe piece to the satellite be placed on. Also it helps to place it on a flat surface and to hold it without pressing any components. The sliding required to insert the satellite facilitates the trigger of the switch mechanism stated previously. The 3D model is released in Fixtures .","title":"Mounting base"}]}